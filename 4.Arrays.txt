Arrays in Java Script
---------------------
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array

JavaScript array is an object that represents a collection of elements.

An array is a 0 index based collection of values

"length" property of an array is used for getting the size of an array

There are 3 ways to create array in JavaScript:

1) By array literal
Syntax:
let arrayname = [value1, value2, ...,valueN];  


Example:

<script>  
let courses=["Core Java","Adv Java", "Hibernate", "Spring"];  

console.log(typeof(courses)) //object

console.log('No of Courses = '+ courses.length)   

 for(let i=0;i<courses.length;i++){  
   console.log(courses[i]);  
 }  

 //iterating an array using for..in loop
 for(index in courses){
   console.log(index+ " - "+ courses[index]); 
 }
</script>  



Note: we can add elements into the array after its creation
 courses[4] = 'Web services';


2) JavaScript Array directly using "new" operator
Syntax:
 let arrayname=new Array();  

Example:
<script> 
 let courses = new Array();    
 courses[0]="Core Java";
 courses[1]="Adv Java";
 courses[2]="Hibernate"
 courses[3]="Spring";  

 console.log("No of Courses = " + courses.length);

 for (let i=0;i<courses.length;i++){  
      console.log(courses[i]);  
 }  
</script> 


3) JavaScript array constructor

<script> 
let courses = new Array("Core Java","Adv Java","Hibernate", "Spring");  

 console.log('No of Courses = '+courses.length);

 for(index in courses){  
    console.log(index+" - "+courses[index]);  
 }  
</script>   

// Mixed Array
let mixedArray = [100,'test',true, {name : 'Sunil'},[10,20], null, undefined];
console.log(mixedArray);
console.log(mixedArray[4][0]); 


Usecase: store the marks of a student with name on button click and to generate the report card on another button click







Array Methods
-------------
1) reverse() - reverses the elements of given array.
<script>
 ....
 courses.reverse();
 alert(courses);
</script>


2) indexOf(element) - searches the specified element in the given array and returns the index of the first match; it returs -1 if the searched element is not in array

3) lastIndexOf(element) - searches the specified element in the given array and returns the index of the last match; if not found -1

indexOf(element[,start_index])

console.log(courses.indexOf('Core Java')); 



4) concat() - returns a new array object that contains two or more merged arrays or values.

array.concat(arr1,arr2,....,arrn) //parameters represents arrays to be concatenated or values

<script> 
let arr1=["C","C++","Python"];  
let arr2=["Java","Java Script"];  

//let result=arr1.concat(arr2);  
let result = arr1.concat(arr2,"Core Java", "Adv Java",25000) 

alert(result);
console.log(result);  
</script>  


let result= arr.concat("Java","JavaScript");  


5) push(...items) - adds items to the end of array

6) pop() - extracts an item from the end

7) shift() - extracts an item from the beginning

8) unshift(...items) - adds items to the beginning



9) delete operator - used to delete an element

<script>
 let courses = ['Core Java', 'Adv Java', 'Hibernate']
 console.log(courses+" | Size="+ courses.length)
    
 alert(courses[1])
    
 delete courses[1]

 alert(courses[1])
    
 console.log(courses+" | Size="+ courses.length)     
</script>



10) splice() - used to remove element(s) from an array from the specified index position
 splice(start index, n)

n - is the number of elements to be deleted from the start index


let arr = ["I", "study", "java script"];
delete arr[1]; // remove "study"
alert( arr[1] ); // undefined
// now arr = ["I",, "java script"];
alert(arr.length ); // 3

The element was removed, but the array still has 3 elements, we can see that arr.length == 3.

splice(index[, deleteCount, elem1, ..., elemN])
It starts from the position index: removes deleteCount elements and then inserts elem1, ..., elemN at their place. Returns the array of removed elements.

<script>
let arr = ["I", "study", "JavaScript"];
arr.splice(1)

arr.splice(1, 1); // from index 1 remove 1 element
alert(arr); // ["I", "JavaScript"]
alert("Size = "+arr.length); // Size = 2
</script>

Example:2
To remove 3 elements and replace them with the other two:

<script>  
let arr = ["I", "study", "JavaScript", "right", "now"];

arr.splice(0, 3, "Let's", "practice");

alert(arr) // now ["Let's", "practice", "right", "now"]
</script



Negative indexes allowed

let arr = [1, 2, 5];
// from index -1 (one step from the end)
// delete 0 elements,
// then insert 3 and 4
arr.splice(-1, 0, 3, 4);
alert( arr ); // 1,2,3,4,5

<button onclick="myFunction()">Try it</button>

<p id="demo1"></p>
<p id="demo2"></p>

<script>
var fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo1").innerHTML = "Original Array:<br>" + fruits;
function myFunction() {
  fruits.splice(2, 0, "Lemon", "Kiwi");
  document.getElementById("demo2").innerHTML = "New Array:<br>" + fruits;
}
</script>


11) slice(start index[, end index]) - It returns a new array containing all items from index "start" to "end" (not including "end"). 

<script>
let courses = ["Core Java","Adv Java","Hibernate", "Spring"];  
alert(courses);
    
//let sub = courses.slice()
//let sub = courses.slice(1);    
let sub = courses.slice(1,2);       
alert(sub) //Adv Java
</script>   


12) join() - joins all elements of an array into a string (default separator is ,)

 <script>
  let courses = ["Core Java", "Adv Java", "Hibernate"];
  let x = courses.join(); 
  alert(x); //Core Java,Adv Java,Hibernate

  x = courses.join(" * ");
  alert(x); //Core Java * Adv Java * Hibernate
 </script>



13) sort() - sorts the elements of an array
 courses.sort();

To sort numbers in an array in ascending order:
<script>
let data = [40, 100, 12, 5, 25, 7];

data.sort(function(a, b){
  return a-b
});
alert(data)
</script>

To sort numbers in an array in descending order:
let data = [40, 100, 12, 5, 25, 7];

data.sort(function(a, b){
   return b-a
});
alert(data)




14) toString() - converts an array to a string, and returns the result

<script> 
 let courses = ["Core Java", "Adv Java", "Hibernate", "Spring"];
 alert(courses.toString())
</script>  



15) fill() - fill the elements in an array with a value

<script> 
let courses = ["Core Java", "Adv Java", "Hibernate", "Spring"];
courses[10]='Java Script' 

alert('Array Size = '+ courses.length)    
alert(courses)    
//courses.fill('Java');
courses.fill('Java',4,10); //4- start index 10 - end index (not included)
    
alert(courses);    
</script>



17) find() - returns the value of the first element in an array that pass a test


<script> 
let ages = [3, 10, 18, 28, 25];

function check(age) {  
  return age >= 18;
}

let match = ages.find(check);   
console.log(match); 
</script>  



18) filter()- creates a new array with every element in an array that pass a test

<script> 
let ages = [32, 33, 16, 40];

function check(age) {
  return age >= 18;
}
let data = ages.filter(check);    
alert(data); 
</script>  

19) forEach() -calls a function for each array element

<script>
let courses = ["Core Java", "Adv Java", "Hibernate", "Spring"];  

function myFun(element, index){
 console.log("Courses["+index+"] = "+element)    
}

courses.forEach(myFun);    
</script>    
--------------------------------
20) entries()- returns an array iterator Object with key/value pairs for each item in the array.
- entry is index and value together

<script> 
let courses = ["Core Java", "Adv Java", "Hibernate", "Spring"];    
let x = courses.entries();
while(z=x.next().value)    
{
    alert(z)
}
</script>




21) keys() - create an Array Iterator object, with keys for each item in the array

<script> 
let courses = ["Core Java", "Adv Java", "Hibernate", "Spring"];    
let x = courses.keys();
alert(x.next().value);    
while(z=x.next().value)    
{
    alert(z)
}
</script> 
------------------------------ 



// forEach Function ES5
console.log('--------------------- forEach Function ---------------');
output = '';
technologies.forEach(function(element) {
    output += `${element} `;
});
console.log(output);

// forEach Function ES6
console.log('--------------------- forEach Function with Arrow ---------------');
output = '';
technologies.forEach(element => output += `${element} `);
console.log(output);



Real-Time Example:

// Filter Function
let employees = [
    {
        name : 'Rajan',
        age : 25,
        designation : 'Software Engineer',
        active : true
    },
    {
        name : 'John',
        age : 35,
        designation : 'Tech Lead',
        active : false
    },
    {
        name : 'Wilson',
        age : 45,
        designation : 'Project Manager',
        active : true
    },
    {
        name : 'Mahesh',
        age : 23,
        designation : 'Software Engineer',
        active : false
    }
];

console.log(employees);

// Filter Function Example
let juniorEmployees = employees.filter(function(employee) {
    return employee.age <= 30;
});
console.log(juniorEmployees);

let seniorEmployees = employees.filter(function(employee) {
   return employee.age > 30;
});
console.log(seniorEmployees);

let activeEmployees = employees.filter(function(employee) {
   return employee.active;
});
console.log(activeEmployees);

let inActiveEmployees = employees.filter(function(employee) {
    return !employee.active;
});
console.log(inActiveEmployees);

=================================
// Real time Example
let employees = [
    {
        name : 'John',
        age : 40,
        designation : 'Manager',
        active : true
    },
    {
        name : 'Wilson',
        age : 45,
        designation : 'Sr.Manager',
        active : false
    },
    {
        name : 'Rajan',
        age : 25,
        designation : 'Software Engineer',
        active : true
    },
    {
        name : 'Laura',
        age : 30,
        designation : 'Team Lead',
        active : false
    }
];

// get names of all employees
let empString = '';
for(let employee of employees){
    empString += `${employee.name.toUpperCase()} `;
}
console.log(empString);

// get all active employees
let activeEmps = [];
for(let employee of employees){
    if(employee.active){
        activeEmps.push(employee);
    }
}
console.log(activeEmps);

// filter
let activeEmployees = employees.filter((employee) => {
    return employee.active;
});
console.log(activeEmployees);

// inactive Employees
let inActiveEmployees = employees.filter((employee) => {
    return !employee.active;
});
console.log(inActiveEmployees);

// junior Employees
let juniorEmployees = employees.filter((employee) => {
    return employee.age <= 30;
});
console.log(juniorEmployees);

// senior Employees
let seniorEmployees = employees.filter((employee) => {
    return employee.age > 30;
});
console.log(seniorEmployees);
========================================
